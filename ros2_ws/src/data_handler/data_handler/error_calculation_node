#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import Float64MultiArray
from geometry_msgs.msg import Vector3Stamped
import numpy as np

class ErrorCalculatorNode(Node):
    """
    A ROS 2 node that computes the Mean Absolute Error (MAE) and Root Mean Square Error (RMSE)
    between ground truth motor velocity and predicted velocity from LiteFlownet3 optical flow.
    """
    
    def __init__(self):
        """
        Initialize the ErrorCalculatorNode with subscribers and variables for error calculation.
        """
        super().__init__('error_calculator_node')
        
        # Subscribers for the two topics
        self.optical_flow_sub = self.create_subscription(
            Vector3Stamped,
            '/optical_flow/LFN3_velocity',
            self.optical_flow_callback,
            10
        )
        self.motor_sub = self.create_subscription(
            Float64MultiArray,
            '/motor/present_velocity',
            self.motor_callback,
            10
        )
        
        # Buffer to store optical flow data as (timestamp, velocity) tuples
        self.optical_flow_data = []
        self.max_buffer_size = 100  # Limit buffer size to manage memory
        
        # Variables for running error calculations
        self.sum_abs_error = 0.0  # Sum of absolute errors for MAE
        self.sum_sq_error = 0.0   # Sum of squared errors for RMSE
        self.sample_count = 0     # Number of synchronized samples
        self.tolerance = 0.01     # Timestamp synchronization tolerance in seconds
        
        self.get_logger().info("ErrorCalculatorNode initialized")

    def optical_flow_callback(self, msg):
        """
        Callback for optical flow velocity messages from '/optical_flow/LFN3_velocity'.
        
        Args:
            msg (Vector3Stamped): Message containing timestamp and predicted velocity.
        """
        # Convert ROS timestamp to seconds
        timestamp = msg.header.stamp.sec + msg.header.stamp.nanosec * 1e-9
        velocity = msg.vector.x  # Predicted velocity in m/s (x-direction)
        
        # Add to buffer
        self.optical_flow_data.append((timestamp, velocity))
        
        # Maintain buffer size by removing oldest entry if necessary
        if len(self.optical_flow_data) > self.max_buffer_size:
            self.optical_flow_data.pop(0)

    def motor_callback(self, msg):
        """
        Callback for motor velocity messages from '/motor/present_velocity'.
        
        Args:
            msg (Float64MultiArray): Message containing [velocity, timestamp].
        """
        # Validate message data
        if len(msg.data) < 2:
            self.get_logger().warn("Invalid motor velocity message: insufficient data")
            return
        
        v_actual = msg.data[0]  # Ground truth velocity in m/s
        timestamp = msg.data[1]  # Timestamp in seconds
        
        # Find the closest optical flow sample within tolerance
        closest_match = None
        min_time_diff = float('inf')
        
        for ts, v_pred in self.optical_flow_data:
            time_diff = abs(ts - timestamp)
            if time_diff < min_time_diff:
                min_time_diff = time_diff
                closest_match = (ts, v_pred)
        
        # Process if a match is found within tolerance
        if closest_match and min_time_diff <= self.tolerance:
            _, v_pred = closest_match
            error = v_pred - v_actual
            
            # Update running sums for error calculations
            self.sum_abs_error += abs(error)
            self.sum_sq_error += error ** 2
            self.sample_count += 1
            
            # Calculate and log current MAE and RMSE
            if self.sample_count > 0:
                mae = self.sum_abs_error / self.sample_count
                rmse = np.sqrt(self.sum_sq_error / self.sample_count)
                self.get_logger().info(
                    f"MAE: {mae:.4f} m/s, RMSE: {rmse:.4f} m/s, Samples: {self.sample_count}"
                )
        else:
            self.get_logger().warn(
                f"No matching optical flow data for motor timestamp {timestamp:.6f}"
            )

def main(args=None):
    """
    Main function to initialize and run the ROS 2 node.
    
    Args:
        args: Command-line arguments (default: None).
    """
    rclpy.init(args=args)
    node = ErrorCalculatorNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Node stopped by user")
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()